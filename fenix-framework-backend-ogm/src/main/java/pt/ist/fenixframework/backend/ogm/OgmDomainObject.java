package pt.ist.fenixframework.backend.ogm;

import java.io.ObjectStreamException;
import java.io.Serializable;
import java.util.UUID;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

// import pt.ist.fenixframework.DomainObject;
// import pt.ist.fenixframework.FenixFramework;
import pt.ist.fenixframework.core.AbstractDomainObjectAdapter;
import pt.ist.fenixframework.core.DomainObjectAllocator;
import pt.ist.fenixframework.core.IdentityMap;

public class OgmDomainObject extends AbstractDomainObjectAdapter {
    private static final Logger logger = Logger.getLogger(OgmDomainObject.class);

    // this should be final, but the ensureOid and restoreOid methods prevent it
    private long primaryKey;  // generated by hibernate-ogm
    private OgmOID oid;       // used by FF.  Includes primaryKey info

    // We need to have the default constructor, because we've added the allocate-instance constructor
    protected OgmDomainObject() {
        super(); // top-level constructor will invoke ensureOid()
    }

    protected OgmDomainObject(DomainObjectAllocator.OID oid) {
        this.oid = (OgmOID)oid.oid;
        this.primaryKey = this.oid.getPrimaryKey();
    }

    @Override
    protected void ensureOid() {
        OgmBackEnd.getInstance().save(this);
        this.oid = new OgmOID(this.getClass(), this.primaryKey);
        // Class objClass = this.getClass();
        // IdentityMap idMap = OgmBackEnd.getInstance().getIdentityMap();

        // while (true) {
        //     // assign new OID
        //     String uuid = UUID.randomUUID().toString();
        //     this.oid = new OID(objClass, uuid);
        //     // cache this instance
        //     Object shouldBeSame = idMap.cache(this);
        //     if (shouldBeSame == this) {
        //         return;
        //     } else {
        //         logger.warn("Another object was already cached with the same key as this new object: " + oid);
        //     }
        // }
    }

    // dealing with domain object identifiers

    @Override
    public OgmOID getOid() {
	return this.oid;
    }

    @Override
    public final String getExternalId() {
	return oid.toExternalId();
    }

}

